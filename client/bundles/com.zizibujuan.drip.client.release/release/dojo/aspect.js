//>>built
define("dojo/aspect",[],function(){"use strict";function advise(dispatcher,type,advice,receiveArguments){var previous=dispatcher[type],around=type=="around",signal;if(around){var advised=advice(function(){return previous.advice(this,arguments)});signal={remove:function(){signal.cancelled=!0},advice:function(target,args){return signal.cancelled?previous.advice(target,args):advised.apply(target,args)}}}else signal={remove:function(){if(this.advice){this.advice=null;var previous=signal.previous,next=signal.next;!next&&!previous?delete dispatcher[type]:(previous?previous.next=next:dispatcher[type]=next,next&&(next.previous=previous))}},id:nextId++,advice:advice,receiveArguments:receiveArguments};if(previous&&!around)if(type=="after"){while(previous.next&&(previous=previous.next));previous.next=signal,signal.previous=previous}else type=="before"&&(dispatcher[type]=signal,signal.next=previous,previous.previous=signal);else dispatcher[type]=signal;return signal}function aspect(type){return function(target,methodName,advice,receiveArguments){var existing=target[methodName],dispatcher;if(!existing||existing.target!=target)target[methodName]=dispatcher=function(){var executionId=nextId,args=arguments,before=dispatcher.before;while(before)args=before.advice.apply(this,args)||args,before=before.next;if(dispatcher.around)var results=dispatcher.around.advice(this,args);var after=dispatcher.after;while(after&&after.id<executionId){if(after.receiveArguments){var newResults=after.advice.apply(this,args);results=newResults===undefined?results:newResults}else results=after.advice.call(this,results,args);after=after.next}return results},existing&&(dispatcher.around={advice:function(target,args){return existing.apply(target,args)}}),dispatcher.target=target;var results=advise(dispatcher||existing,type,advice,receiveArguments);return advice=null,results}}var undefined,nextId=0,after=aspect("after"),before=aspect("before"),around=aspect("around");return{before:before,around:around,after:after}})