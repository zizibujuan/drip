//>>built
define("dijit/form/NumberTextBox",["dojo/_base/declare","dojo/_base/lang","dojo/number","./RangeBoundTextBox"],function(declare,lang,number,RangeBoundTextBox){var NumberTextBoxMixin=declare("dijit.form.NumberTextBoxMixin",null,{pattern:number.regexp,value:NaN,editOptions:{pattern:"#.######"},_formatter:number.format,postMixInProperties:function(){this.inherited(arguments),this._set("type","text")},_setConstraintsAttr:function(constraints){var places=typeof constraints.places=="number"?constraints.places:0;places&&places++,typeof constraints.max!="number"&&(constraints.max=9*Math.pow(10,15-places)),typeof constraints.min!="number"&&(constraints.min=-9*Math.pow(10,15-places)),this.inherited(arguments,[constraints]),this.focusNode&&this.focusNode.value&&!isNaN(this.value)&&this.set("value",this.value)},_onFocus:function(){if(this.disabled)return;var val=this.get("value");if(typeof val=="number"&&!isNaN(val)){var formattedValue=this.format(val,this.constraints);formattedValue!==undefined&&(this.textbox.value=formattedValue)}this.inherited(arguments)},format:function(value,constraints){var formattedValue=String(value);return typeof value!="number"?formattedValue:isNaN(value)?"":!("rangeCheck"in this&&this.rangeCheck(value,constraints))&&constraints.exponent!==!1&&/\de[-+]?\d/i.test(formattedValue)?formattedValue:(this.editOptions&&this.focused&&(constraints=lang.mixin({},constraints,this.editOptions)),this._formatter(value,constraints))},_parser:number.parse,parse:function(value,constraints){var v=this._parser(value,lang.mixin({},constraints,this.editOptions&&this.focused?this.editOptions:{}));return this.editOptions&&this.focused&&isNaN(v)&&(v=this._parser(value,constraints)),v},_getDisplayedValueAttr:function(){var v=this.inherited(arguments);return isNaN(v)?this.textbox.value:v},filter:function(value){return value==null||value===""?NaN:this.inherited(arguments)},serialize:function(value,options){return typeof value!="number"||isNaN(value)?"":this.inherited(arguments)},_setBlurValue:function(){var val=lang.hitch(lang.mixin({},this,{focused:!0}),"get")("value");this._setValueAttr(val,!0)},_setValueAttr:function(value,priorityChange,formattedValue){if(value!==undefined&&formattedValue===undefined){formattedValue=String(value);if(typeof value=="number"){if(isNaN(value))formattedValue="";else if("rangeCheck"in this&&this.rangeCheck(value,this.constraints)||this.constraints.exponent===!1||!/\de[-+]?\d/i.test(formattedValue))formattedValue=undefined}else value?value=undefined:(formattedValue="",value=NaN)}this.inherited(arguments,[value,priorityChange,formattedValue])},_getValueAttr:function(){var v=this.inherited(arguments);if(isNaN(v)&&this.textbox.value!==""){if(this.constraints.exponent!==!1&&/\de[-+]?\d/i.test(this.textbox.value)&&(new RegExp("^"+number._realNumberRegexp(lang.mixin({},this.constraints))+"$")).test(this.textbox.value)){var n=Number(this.textbox.value);return isNaN(n)?undefined:n}return undefined}return v},isValid:function(isFocused){if(!this.focused||this._isEmpty(this.textbox.value))return this.inherited(arguments);var v=this.get("value");return!isNaN(v)&&this.rangeCheck(v,this.constraints)?this.constraints.exponent!==!1&&/\de[-+]?\d/i.test(this.textbox.value)?!0:this.inherited(arguments):!1}}),NumberTextBox=declare("dijit.form.NumberTextBox",[RangeBoundTextBox,NumberTextBoxMixin],{baseClass:"dijitTextBox dijitNumberTextBox"});return NumberTextBox.Mixin=NumberTextBoxMixin,NumberTextBox})