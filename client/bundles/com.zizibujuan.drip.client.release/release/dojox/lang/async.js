//>>built
define("dojox/lang/async",["dojo","dijit","dojox"],function(dojo,dijit,dojox){dojo.provide("dojox.lang.async"),function(){var d=dojo,Deferred=d.Deferred,each=d.forEach,some=d.some,async=dojox.lang.async,aps=Array.prototype.slice,opts=Object.prototype.toString;async.seq=function(x){var fs=opts.call(x)=="[object Array]"?x:arguments;return function(init){var x=new Deferred;return each(fs,function(f){x.addCallback(f)}),x.callback(init),x}},async.par=function(x){var fs=opts.call(x)=="[object Array]"?x:arguments;return function(init){var results=new Array(fs.length),cancel=function(){each(results,function(v){v instanceof Deferred&&v.fired<0&&v.cancel()})},x=new Deferred(cancel),ready=fs.length;each(fs,function(f,i){var x;try{x=f(init)}catch(e){x=e}results[i]=x});var failed=some(results,function(v){return v instanceof Error?(cancel(),x.errback(v),!0):!1});return failed||each(results,function(v,i){v instanceof Deferred?v.addCallbacks(function(v){results[i]=v,--ready||x.callback(results)},function(v){cancel(),x.errback(v)}):--ready}),ready||x.callback(results),x}},async.any=function(x){var fs=opts.call(x)=="[object Array]"?x:arguments;return function(init){var results=new Array(fs.length),noResult=!0;cancel=function(index){each(results,function(v,i){i!=index&&v instanceof Deferred&&v.fired<0&&v.cancel()})},x=new Deferred(cancel),each(fs,function(f,i){var x;try{x=f(init)}catch(e){x=e}results[i]=x});var done=some(results,function(v,i){return v instanceof Deferred?!1:(cancel(i),x.callback(v),!0)});return done||each(results,function(v,i){v.addBoth(function(v){noResult&&(noResult=!1,cancel(i),x.callback(v))})}),x}},async.select=function(cond,x){var fs=opts.call(x)=="[object Array]"?x:aps.call(arguments,1);return function(init){return(new Deferred).addCallback(cond).addCallback(function(v){return typeof v=="number"&&v>=0&&v<fs.length?fs[v](init):new Error("async.select: out of range")}).callback(init)}},async.ifThen=function(cond,ifTrue,ifFalse){return function(init){return(new Deferred).addCallback(cond).addCallback(function(v){return(v?ifTrue:ifFalse)(init)}).callback(init)}},async.loop=function(cond,body){return function(init){function ifErr(v){y.errback(v)}function loop(v){return v?x.addCallback(body).addCallback(setUp):y.callback(v),v}function setUp(init){x=(new Deferred).addCallback(cond).addCallback(loop).addErrback(ifErr),x.callback(init)}var x,y=new Deferred(function(){x.cancel()});return setUp(init),y}}}()})