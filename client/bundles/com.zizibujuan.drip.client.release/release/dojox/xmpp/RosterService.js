//>>built
define("dojox/xmpp/RosterService",["dojo","dijit","dojox"],function(dojo,dijit,dojox){dojo.provide("dojox.xmpp.RosterService"),dojox.xmpp.roster={ADDED:101,CHANGED:102,REMOVED:103},dojo.declare("dojox.xmpp.RosterService",null,{constructor:function(xmppSession){this.session=xmppSession},addRosterItem:function(jid,name,groups){if(!jid)throw new Error("Roster::addRosterItem() - User ID is null");var iqId=this.session.getNextIqId(),req={id:iqId,from:this.session.jid+"/"+this.session.resource,type:"set"},request=new dojox.string.Builder(dojox.xmpp.util.createElement("iq",req,!1));request.append(dojox.xmpp.util.createElement("query",{xmlns:"jabber:iq:roster"},!1)),jid=dojox.xmpp.util.encodeJid(jid),jid.indexOf("@")==-1&&(jid=jid+"@"+this.session.domain),request.append(dojox.xmpp.util.createElement("item",{jid:jid,name:dojox.xmpp.util.xmlEncode(name)},!1));if(groups)for(var i=0;i<groups.length;i++)request.append("<group>"),request.append(groups[i]),request.append("</group>");request.append("</item></query></iq>");var def=this.session.dispatchPacket(request.toString(),"iq",req.id);return def.addCallback(this,"verifyRoster"),def},updateRosterItem:function(jid,name,groups){jid.indexOf("@")==-1&&(jid+=jid+"@"+this.session.domain);var req={id:this.session.getNextIqId(),from:this.session.jid+"/"+this.session.resource,type:"set"},request=new dojox.string.Builder(dojox.xmpp.util.createElement("iq",req,!1));request.append(dojox.xmpp.util.createElement("query",{xmlns:"jabber:iq:roster"},!1));var i=this.session.getRosterIndex(jid);if(i==-1)return;var item={jid:jid};name?item.name=name:this.session.roster[i].name&&(item.name=this.session.roster[i].name),item.name&&(item.name=dojox.xmpp.util.xmlEncode(item.name)),request.append(dojox.xmpp.util.createElement("item",item,!1));var newGroups=groups?groups:this.session.roster[i].groups;if(newGroups)for(var x=0;x<newGroups.length;x++)request.append("<group>"),request.append(newGroups[x]),request.append("</group>");request.append("</item></query></iq>");var def=this.session.dispatchPacket(request.toString(),"iq",req.id);return def.addCallback(this,"verifyRoster"),def},verifyRoster:function(res){if(res.getAttribute("type")!="result"){var err=this.session.processXmppError(res);this.onAddRosterItemFailed(err)}return res},addRosterItemToGroup:function(jid,group){if(!jid)throw new Error("Roster::addRosterItemToGroup() JID is null or undefined");if(!group)throw new Error("Roster::addRosterItemToGroup() group is null or undefined");var index=this.session.getRosterIndex(jid);if(index==-1)return;var item=this.session.roster[index],tgroups=[],found=!1;for(var i=0;item<item.groups.length&&!found;i++){if(item.groups[i]!=group)continue;found=!0}return found?dojox.xmpp.xmpp.INVALID_ID:this.updateRosterItem(jid,item.name,item.groups.concat(group),index)},removeRosterGroup:function(group){var roster=this.session.roster;for(var i=0;i<roster.length;i++){var item=roster[i];if(item.groups.length>0)for(var j=0;j<item.groups.length;j++)item.groups[j]==group&&(item.groups.splice(j,1),this.updateRosterItem(item.jid,item.name,item.groups))}},renameRosterGroup:function(group,newGroup){var roster=this.session.roster;for(var i=0;i<roster.length;i++){var item=roster[i];if(item.groups.length>0)for(var j=0;j<item.groups.length;j++)item.groups[j]==group&&(item.groups[j]=newGroup,this.updateRosterItem(item.jid,item.name,item.groups))}},removeRosterItemFromGroup:function(jid,group){if(!jid)throw new Error("Roster::addRosterItemToGroup() JID is null or undefined");if(!group)throw new Error("Roster::addRosterItemToGroup() group is null or undefined");var index=this.session.getRosterIndex(jid);if(index==-1)return;var item=this.session.roster[index],found=!1;for(var i=0;i<item.groups.length&&!found;i++){if(item.groups[i]!=group)continue;found=!0,index=i}return found==1?(item.groups.splice(index,1),this.updateRosterItem(jid,item.name,item.groups)):dojox.xmpp.xmpp.INVALID_ID},rosterItemRenameGroup:function(jid,oldGroup,newGroup){if(!jid)throw new Error("Roster::rosterItemRenameGroup() JID is null or undefined");if(!newGroup)throw new Error("Roster::rosterItemRenameGroup() group is null or undefined");var index=this.session.getRosterIndex(jid);if(index==-1)return;var item=this.session.roster[index],found=!1;for(var i=0;i<item.groups.length&&!found;i++)item.groups[i]==oldGroup&&(item.groups[i]=newGroup,found=!0);return found==1?this.updateRosterItem(jid,item.name,item.groups):dojox.xmpp.xmpp.INVALID_ID},renameRosterItem:function(jid,newName){if(!jid)throw new Error("Roster::addRosterItemToGroup() JID is null or undefined");if(!newName)throw new Error("Roster::addRosterItemToGroup() New Name is null or undefined");var index=this.session.getRosterIndex(jid);if(index==-1)return;return this.updateRosterItem(jid,newName,this.session.roster.groups,index)},removeRosterItem:function(jid){if(!jid)throw new Error("Roster::addRosterItemToGroup() JID is null or undefined");var req={id:this.session.getNextIqId(),from:this.session.jid+"/"+this.session.resource,type:"set"},request=new dojox.string.Builder(dojox.xmpp.util.createElement("iq",req,!1));request.append(dojox.xmpp.util.createElement("query",{xmlns:"jabber:iq:roster"},!1)),jid.indexOf("@")==-1&&(jid+=jid+"@"+this.session.domain),request.append(dojox.xmpp.util.createElement("item",{jid:jid,subscription:"remove"},!0)),request.append("</query></iq>");var def=this.session.dispatchPacket(request.toString(),"iq",req.id);return def.addCallback(this,"verifyRoster"),def},getAvatar:function(jid){},publishAvatar:function(type,binval){},onVerifyRoster:function(id){},onVerifyRosterFailed:function(err){}})})