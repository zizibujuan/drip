//>>built
define("dojox/form/manager/_Mixin",["dojo/_base/window","dojo/_base/lang","dojo/_base/array","dojo/_base/connect","dojo/dom-attr","dojo/dom-class","dijit/_base/manager","dijit/_Widget","dijit/form/_FormWidget","dijit/form/Button","dijit/form/CheckBox","dojo/_base/declare"],function(win,lang,array,connect,domAttr,domClass,manager,Widget,FormWidget,Button,CheckBox,declare){var fm=lang.getObject("dojox.form.manager",!0),aa=fm.actionAdapter=function(action){return function(name,elems,value){lang.isArray(elems)?array.forEach(elems,function(elem){action.call(this,name,elem,value)},this):action.apply(this,arguments)}},ia=fm.inspectorAdapter=function(inspector){return function(name,elem,value){return inspector.call(this,name,lang.isArray(elem)?elem[0]:elem,value)}},skipNames={domNode:1,containerNode:1,srcNodeRef:1,bgIframe:1},keys=fm._keys=function(o){var list=[],key;for(key in o)o.hasOwnProperty(key)&&list.push(key);return list},registerWidget=function(widget){var name=widget.get("name");if(name&&widget instanceof FormWidget)if(name in this.formWidgets){var a=this.formWidgets[name].widget;lang.isArray(a)?a.push(widget):this.formWidgets[name].widget=[a,widget]}else this.formWidgets[name]={widget:widget,connections:[]};else name=null;return name},getObserversFromWidget=function(name){var observers={};return aa(function(_,w){var o=w.get("observer");o&&typeof o=="string"&&array.forEach(o.split(","),function(o){o=lang.trim(o),o&&lang.isFunction(this[o])&&(observers[o]=1)},this)}).call(this,null,this.formWidgets[name].widget),keys(observers)},connectWidget=function(name,observers){var t=this.formWidgets[name],w=t.widget,c=t.connections;c.length&&(array.forEach(c,connect.disconnect),c=t.connections=[]);if(lang.isArray(w))array.forEach(w,function(w){array.forEach(observers,function(o){c.push(connect.connect(w,"onChange",this,function(evt){this.watching&&domAttr.get(w.focusNode,"checked")&&this[o](w.get("value"),name,w,evt)}))},this)},this);else{var eventName=w.isInstanceOf(Button)?"onClick":"onChange";array.forEach(observers,function(o){c.push(connect.connect(w,eventName,this,function(evt){this.watching&&this[o](w.get("value"),name,w,evt)}))},this)}},_Mixin=declare("dojox.form.manager._Mixin",null,{watching:!0,startup:function(){if(this._started)return;this.formWidgets={},this.formNodes={},this.registerWidgetDescendants(this),this.inherited(arguments)},destroy:function(){for(var name in this.formWidgets)array.forEach(this.formWidgets[name].connections,connect.disconnect);this.formWidgets={},this.inherited(arguments)},registerWidget:function(widget){typeof widget=="string"?widget=manager.byId(widget):widget.tagName&&widget.cloneNode&&(widget=manager.byNode(widget));var name=registerWidget.call(this,widget);return name&&connectWidget.call(this,name,getObserversFromWidget.call(this,name)),this},unregisterWidget:function(name){return name in this.formWidgets&&(array.forEach(this.formWidgets[name].connections,this.disconnect,this),delete this.formWidgets[name]),this},registerWidgetDescendants:function(widget){typeof widget=="string"?widget=manager.byId(widget):widget.tagName&&widget.cloneNode&&(widget=manager.byNode(widget));var widgets=array.map(widget.getDescendants(),registerWidget,this);return array.forEach(widgets,function(name){name&&connectWidget.call(this,name,getObserversFromWidget.call(this,name))},this),this.registerNodeDescendants?this.registerNodeDescendants(widget.domNode):this},unregisterWidgetDescendants:function(widget){return typeof widget=="string"?widget=manager.byId(widget):widget.tagName&&widget.cloneNode&&(widget=manager.byNode(widget)),array.forEach(array.map(widget.getDescendants(),function(w){return w instanceof FormWidget&&w.get("name")||null}),function(name){name&&this.unregisterWidget(name)},this),this.unregisterNodeDescendants?this.unregisterNodeDescendants(widget.domNode):this},formWidgetValue:function(elem,value){var isSetter=arguments.length==2&&value!==undefined,result;return typeof elem=="string"&&(elem=this.formWidgets[elem],elem&&(elem=elem.widget)),elem?lang.isArray(elem)?isSetter?(array.forEach(elem,function(widget){widget.set("checked",!1,!this.watching)},this),array.forEach(elem,function(widget){widget.set("checked",widget.value===value,!this.watching)},this),this):(array.some(elem,function(widget){return domAttr.get(widget.focusNode,"checked")?(result=widget,!0):!1}),result?result.get("value"):""):elem.isInstanceOf&&elem.isInstanceOf(CheckBox)?isSetter?(elem.set("value",Boolean(value),!this.watching),this):Boolean(elem.get("value")):isSetter?(elem.set("value",value,!this.watching),this):elem.get("value"):null},formPointValue:function(elem,value){return elem&&typeof elem=="string"&&(elem=this[elem]),!elem||!elem.tagName||!elem.cloneNode?null:domClass.contains(elem,"dojoFormValue")?arguments.length==2&&value!==undefined?(elem.innerHTML=value,this):elem.innerHTML:null},inspectFormWidgets:function(inspector,state,defaultValue){var name,result={};if(state)if(lang.isArray(state))array.forEach(state,function(name){name in this.formWidgets&&(result[name]=inspector.call(this,name,this.formWidgets[name].widget,defaultValue))},this);else for(name in state)name in this.formWidgets&&(result[name]=inspector.call(this,name,this.formWidgets[name].widget,state[name]));else for(name in this.formWidgets)result[name]=inspector.call(this,name,this.formWidgets[name].widget,defaultValue);return result},inspectAttachedPoints:function(inspector,state,defaultValue){var name,result={};if(state)if(lang.isArray(state))array.forEach(state,function(name){var elem=this[name];elem&&elem.tagName&&elem.cloneNode&&(result[name]=inspector.call(this,name,elem,defaultValue))},this);else for(name in state){var elem=this[name];elem&&elem.tagName&&elem.cloneNode&&(result[name]=inspector.call(this,name,elem,state[name]))}else for(name in this)if(!(name in skipNames)){var elem=this[name];elem&&elem.tagName&&elem.cloneNode&&(result[name]=inspector.call(this,name,elem,defaultValue))}return result},inspect:function(inspector,state,defaultValue){var result=this.inspectFormWidgets(function(name,widget,value){return lang.isArray(widget)?inspector.call(this,name,array.map(widget,function(w){return w.domNode}),value):inspector.call(this,name,widget.domNode,value)},state,defaultValue);return this.inspectFormNodes&&lang.mixin(result,this.inspectFormNodes(inspector,state,defaultValue)),lang.mixin(result,this.inspectAttachedPoints(inspector,state,defaultValue))}});return lang.extend(Widget,{observer:""}),_Mixin})