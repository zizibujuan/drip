//>>built
define("dojox/dtl/contrib/dom",["dojo/_base/kernel","dojo/_base/lang","dojo/_base/connect","dojo/dom-style","dojo/dom-construct","../_base","../dom"],function(kernel,lang,connect,domStyle,domConstruct,dd,dddom){var ddch=lang.getObject("dojox.dtl.contrib.dom",!0),simple={render:function(){return this.contents}};return ddch.StyleNode=lang.extend(function(styles){this.contents={},this._current={},this._styles=styles;for(var key in styles){if(styles[key].indexOf("{{")!=-1)var node=new dd.Template(styles[key]);else{var node=lang.delegate(simple);node.contents=styles[key]}this.contents[key]=node}},{render:function(context,buffer){for(var key in this.contents){var value=this.contents[key].render(context);this._current[key]!=value&&domStyle.set(buffer.getParent(),key,this._current[key]=value)}return buffer},unrender:function(context,buffer){return this._current={},buffer},clone:function(buffer){return new this.constructor(this._styles)}}),ddch.BufferNode=lang.extend(function(nodelist,options){this.nodelist=nodelist,this.options=options},{_swap:function(type,node){if(!this.swapped&&this.parent.parentNode){if(type=="node"){if(node.nodeType==3&&!this.options.text||node.nodeType==1&&!this.options.node)return}else if(type=="class"&&type!="class")return;this.onAddNode&&connect.disconnect(this.onAddNode),this.onRemoveNode&&connect.disconnect(this.onRemoveNode),this.onChangeAttribute&&connect.disconnect(this.onChangeAttribute),this.onChangeData&&connect.disconnect(this.onChangeData),this.swapped=this.parent.cloneNode(!0),this.parent.parentNode.replaceChild(this.swapped,this.parent)}},render:function(context,buffer){return this.parent=buffer.getParent(),this.options.node&&(this.onAddNode=connect.connect(buffer,"onAddNode",lang.hitch(this,"_swap","node")),this.onRemoveNode=connect.connect(buffer,"onRemoveNode",lang.hitch(this,"_swap","node"))),this.options.text&&(this.onChangeData=connect.connect(buffer,"onChangeData",lang.hitch(this,"_swap","node"))),this.options["class"]&&(this.onChangeAttribute=connect.connect(buffer,"onChangeAttribute",lang.hitch(this,"_swap","class"))),buffer=this.nodelist.render(context,buffer),this.swapped?(this.swapped.parentNode.replaceChild(this.parent,this.swapped),domConstruct.destroy(this.swapped)):(this.onAddNode&&connect.disconnect(this.onAddNode),this.onRemoveNode&&connect.disconnect(this.onRemoveNode),this.onChangeAttribute&&connect.disconnect(this.onChangeAttribute),this.onChangeData&&connect.disconnect(this.onChangeData)),delete this.parent,delete this.swapped,buffer},unrender:function(context,buffer){return this.nodelist.unrender(context,buffer)},clone:function(buffer){return new this.constructor(this.nodelist.clone(buffer),this.options)}}),lang.mixin(ddch,{buffer:function(parser,token){var parts=token.contents.split().slice(1),options={},found=!1;for(var i=parts.length;i--;)found=!0,options[parts[i]]=!0;found||(options.node=!0);var nodelist=parser.parse(["endbuffer"]);return parser.next_token(),new ddch.BufferNode(nodelist,options)},html:function(parser,token){return kernel.deprecated("{% html someVariable %}","Use {{ someVariable|safe }} instead"),parser.create_variable_node(token.contents.slice(5)+"|safe")},style_:function(parser,token){var styles={};token=token.contents.replace(/^style\s+/,"");var rules=token.split(/\s*;\s*/g);for(var i=0,rule;rule=rules[i];i++){var parts=rule.split(/\s*:\s*/g),key=parts[0],value=lang.trim(parts[1]);value&&(styles[key]=value)}return new ddch.StyleNode(styles)}}),dd.register.tags("dojox.dtl.contrib",{dom:["html","attr:style","buffer"]}),dojox.dtl.contrib.dom})