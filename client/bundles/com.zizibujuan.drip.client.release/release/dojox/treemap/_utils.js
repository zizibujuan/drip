//>>built
define("dojox/treemap/_utils",["dojo/_base/array"],function(arr){var utils={group:function(items,groupingFunctions,measureFunction){var response={children:[]},merge=function(obj,entry){return obj.__treeValue||(obj.__treeValue=0),obj.__treeValue+=measureFunction(entry),obj};return arr.forEach(items,function(entry){var r=response;arr.forEach(groupingFunctions,function(groupingFunction,j){var data=groupingFunction(entry),child=utils.find(r.children,function(item){return item.__treeName==data});child||r.children.push(child={__treeName:data,__treeID:data+Math.random(),children:[]}),child=merge(child,entry),j!=groupingFunctions.length-1?r=child:child.children.push(entry)}),r=merge(r,entry)}),response},find:function(array,callback){var l=array.length;for(var i=0;i<l;++i)if(callback.call(null,array[i]))return array[i];return null},solve:function(items,width,height,areaFunc,rtl){var treeMapElements=utils.initElements(items,areaFunc),dataTotal=treeMapElements.total,elements=treeMapElements.elements,realSize=dataTotal;if(dataTotal==0){if(elements.length==0)return{items:items,rects:[],total:0};arr.forEach(elements,function(element){element.size=element.sizeTmp=100}),dataTotal=elements.length*100}elements.sort(function(b,a){return a.size-b.size}),utils._compute(width,height,elements,dataTotal),elements.sort(function(a,b){return a.index-b.index});var result={};return result.elements=elements,result.size=realSize,rects=arr.map(elements,function(element){return{x:rtl?width-element.x-element.width:element.x,y:element.y,w:element.width,h:element.height}}),result.rectangles=rects,result},initElements:function(items,areaFunc){var total=0,elements=arr.map(items,function(item,index){var size=areaFunc!=null?areaFunc(item):0;if(size<0)throw new Error("item size dimension must be positive");return total+=size,{index:index,size:size,sizeTmp:size}});return{elements:elements,total:total}},_compute:function(width,height,elements,total){var valueScale=width*height/total/100;arr.forEach(elements,function(element){element.sizeTmp*=valueScale});var start=0,end=0,aspectCurr=-1>>>1,aspectLast,offsetX=0,offsetY=0,tmp_width=width,tmp_height=height,vert=tmp_width>tmp_height;while(end!=elements.length){aspectLast=utils._trySolution(elements,start,end,vert,tmp_width,tmp_height);if(aspectLast>aspectCurr||aspectLast<1){var currX=0,currY=0;for(var n=start;n<end;n++)elements[n].x=offsetX+currX,elements[n].y=offsetY+currY,vert?currY+=elements[n].height:currX+=elements[n].width;vert?offsetX+=elements[start].width:offsetY+=elements[start].height,tmp_width=width-offsetX,tmp_height=height-offsetY,vert=tmp_width>tmp_height,start=end,end=start,aspectCurr=-1>>>1;continue}for(var n=start;n<=end;n++)elements[n].width=elements[n].widthTmp,elements[n].height=elements[n].heightTmp;aspectCurr=aspectLast,end++}var currX1=0,currY1=0;for(var n=start;n<end;n++)elements[n].x=offsetX+currX1,elements[n].y=offsetY+currY1,vert?currY1+=elements[n].height:currX1+=elements[n].width},_trySolution:function(elements,start,end,vert,tmp_width,tmp_height){var total=0,aspect=0,localWidth=0,localHeight=0;for(var n=start;n<=end;n++)total+=elements[n].sizeTmp;vert?tmp_height==0?localWidth=localHeight=0:(localWidth=total/tmp_height*100,localHeight=tmp_height):tmp_width==0?localWidth=localHeight=0:(localHeight=total/tmp_width*100,localWidth=tmp_width);for(var n=start;n<=end;n++)vert?(elements[n].widthTmp=localWidth,total==0?elements[n].heightTmp=0:elements[n].heightTmp=localHeight*elements[n].sizeTmp/total):(total==0?elements[n].widthTmp=0:elements[n].widthTmp=localWidth*elements[n].sizeTmp/total,elements[n].heightTmp=localHeight);return aspect=Math.max(elements[end].heightTmp/elements[end].widthTmp,elements[end].widthTmp/elements[end].heightTmp),aspect==undefined?1:aspect}};return utils})