//>>built
define("dojox/storage/WhatWGStorageProvider",["dojo","dijit","dojox","dojo/require!dojox/storage/Provider,dojox/storage/manager"],function(dojo,dijit,dojox){dojo.provide("dojox.storage.WhatWGStorageProvider"),dojo.require("dojox.storage.Provider"),dojo.require("dojox.storage.manager"),dojo.declare("dojox.storage.WhatWGStorageProvider",[dojox.storage.Provider],{initialized:!1,_domain:null,_available:null,_statusHandler:null,_allNamespaces:null,_storageEventListener:null,initialize:function(){if(dojo.config["disableWhatWGStorage"]==1)return;this._domain=location.hostname,this.initialized=!0,dojox.storage.manager.loaded()},isAvailable:function(){try{var myStorage=globalStorage[location.hostname]}catch(e){return this._available=!1,this._available}return this._available=!0,this._available},put:function(key,value,resultsHandler,namespace){if(this.isValidKey(key)==0)throw new Error("Invalid key given: "+key);namespace=namespace||this.DEFAULT_NAMESPACE,key=this.getFullKey(key,namespace),this._statusHandler=resultsHandler,dojo.isString(value)?value="string:"+value:value=dojo.toJson(value);var storageListener=dojo.hitch(this,function(evt){window.removeEventListener("storage",storageListener,!1),resultsHandler&&resultsHandler.call(null,this.SUCCESS,key,null,namespace)});window.addEventListener("storage",storageListener,!1);try{var myStorage=globalStorage[this._domain];myStorage.setItem(key,value)}catch(e){this._statusHandler.call(null,this.FAILED,key,e.toString(),namespace)}},get:function(key,namespace){if(this.isValidKey(key)==0)throw new Error("Invalid key given: "+key);namespace=namespace||this.DEFAULT_NAMESPACE,key=this.getFullKey(key,namespace);var myStorage=globalStorage[this._domain],results=myStorage.getItem(key);return results==null||results==""?null:(results=results.value,dojo.isString(results)&&/^string:/.test(results)?results=results.substring("string:".length):results=dojo.fromJson(results),results)},getNamespaces:function(){var results=[this.DEFAULT_NAMESPACE],found={},myStorage=globalStorage[this._domain],tester=/^__([^_]*)_/;for(var i=0;i<myStorage.length;i++){var currentKey=myStorage.key(i);if(tester.test(currentKey)==1){var currentNS=currentKey.match(tester)[1];typeof found[currentNS]=="undefined"&&(found[currentNS]=!0,results.push(currentNS))}}return results},getKeys:function(namespace){namespace=namespace||this.DEFAULT_NAMESPACE;if(this.isValidKey(namespace)==0)throw new Error("Invalid namespace given: "+namespace);var namespaceTester;namespace==this.DEFAULT_NAMESPACE?namespaceTester=new RegExp("^([^_]{2}.*)$"):namespaceTester=new RegExp("^__"+namespace+"_(.*)$");var myStorage=globalStorage[this._domain],keysArray=[];for(var i=0;i<myStorage.length;i++){var currentKey=myStorage.key(i);namespaceTester.test(currentKey)==1&&(currentKey=currentKey.match(namespaceTester)[1],keysArray.push(currentKey))}return keysArray},clear:function(namespace){namespace=namespace||this.DEFAULT_NAMESPACE;if(this.isValidKey(namespace)==0)throw new Error("Invalid namespace given: "+namespace);var namespaceTester;namespace==this.DEFAULT_NAMESPACE?namespaceTester=new RegExp("^[^_]{2}"):namespaceTester=new RegExp("^__"+namespace+"_");var myStorage=globalStorage[this._domain],keys=[];for(var i=0;i<myStorage.length;i++)namespaceTester.test(myStorage.key(i))==1&&(keys[keys.length]=myStorage.key(i));dojo.forEach(keys,dojo.hitch(myStorage,"removeItem"))},remove:function(key,namespace){key=this.getFullKey(key,namespace);var myStorage=globalStorage[this._domain];myStorage.removeItem(key)},isPermanent:function(){return!0},getMaximumSize:function(){return this.SIZE_NO_LIMIT},hasSettingsUI:function(){return!1},showSettingsUI:function(){throw new Error(this.declaredClass+" does not support a storage settings user-interface")},hideSettingsUI:function(){throw new Error(this.declaredClass+" does not support a storage settings user-interface")},getFullKey:function(key,namespace){namespace=namespace||this.DEFAULT_NAMESPACE;if(this.isValidKey(namespace)==0)throw new Error("Invalid namespace given: "+namespace);return namespace==this.DEFAULT_NAMESPACE?key:"__"+namespace+"_"+key}}),dojox.storage.manager.register("dojox.storage.WhatWGStorageProvider",new dojox.storage.WhatWGStorageProvider)})